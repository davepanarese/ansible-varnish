#
# This is VCL file for {{ item.name }}.
#

vcl 4.0;

import std;
import directors;

probe {{ item.varnish_probe_check.probe_name }}
{
    .url = "{{ item.varnish_probe_check.probe_url }}";
    .interval = {{ item.varnish_probe_check.probe_interval }};
    .timeout = {{ item.varnish_probe_check.probe_timeout }};
    .window = {{ item.varnish_probe_check.probe_window }};
    .threshold = {{ item.varnish_probe_check.probe_threshold }};
}

# Consul definition for backends
{% raw %}{{range service "swarm_worker"}}
backend {{.Name}}_{{.ID}} {
    .host = "{{.Address}}";
{% endraw %}
    .port = "{{ item.varnish_backend.service_proxy_port }}";
    .probe = {{ item.varnish_probe_check.probe_name }};
}{% raw %}{{end}}
{% endraw %}

sub vcl_init {
    new backend_pool = directors.round_robin();
{% raw %}{{range service "swarm_worker"}}
    backend_pool.add_backend({{.Name}}_{{.ID}});{{end}}
{% endraw %}
}

acl purge {
{% for acl in item.varnish_hosts_allow_purge %}
    "{{ acl }}";
{% endfor %}
}

# Device identification
sub identify_device {

    if (req.http.X-UA-Detect && std.ip(regsub(req.http.X-Forwarded-For, "^([^,]+),?.*$", "\1"), "0.0.0.0") ~ purge) {
        # Respect X-UA-Detect if it comes from trusted clients
        set req.http.X-UA-Detect = req.http.X-UA-Detect;
    }
    else
    {
        unset req.http.X-UA-Detect;
        # Default to classification as a PC
        set req.http.X-UA-Detect = "desktop";

        if (req.http.User-Agent ~ "(?i)kindle.*fire") {
            set req.http.X-UA-Detect = "mobile";
        } elsif (req.http.User-Agent ~ "(?i)\(ip(hone|od)" || req.http.User-Agent ~ "(?i)android.*(mobile|mini)") {
            set req.http.X-UA-Detect = "mobile";
        } elsif (req.http.User-Agent ~ "(?i)android") {
            set req.http.X-UA-Detect = "mobile";
        } elsif (req.http.User-Agent ~ "(?i)(windows\s+(?:ce|phone)|googlebot-mobile|blackberry|opera\+mini|symbian\s*os)") {
            set req.http.X-UA-Detect = "mobile";
        }
    }
}

sub vcl_recv {
    # Get backend nodes
    set req.backend_hint = backend_pool.backend();

    # Call device detection
    call identify_device;

    # Set real ip of request
    set req.http.X-Forwarded-For = regsub(req.http.X-Forwarded-For, "^([^,]+),?.*$", "\1");

    # Purge if allowed
    if (req.method == "PURGE") {
        if (!std.ip(regsub(req.http.X-Forwarded-For, "^([^,]+),?.*$", "\1"), "0.0.0.0") ~ purge) {
            return(synth(403, "Not allowed."));
        }
        return (purge);
    }

    # Don't cache if request is not GET or HEAD
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    # Don't cache path specified behind
{% for object in item.varnish_url_not_cache %}
{% if object.url is defined %}
    if (req.http.host ~ "^{{ object.url }}" && req.url ~ "^{{ object.path }}") {
        return (pass);
    }  
{% else %}
    if (req.url ~ "^{{ object.path }}") {
        return (pass);
    }
{% endif %}
{% endfor %}

    # Reset coockie for other objects
    unset req.http.Cookie;
}

sub vcl_hash {
    # If the device has been classified as any sort of mobile device, include the User-Agent in the hash
    # However, do not do this for any static assets as our web application returns the same ones for every device.
    if (!(req.url ~ "\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|flv|swf|mov|avi|mp3|mpg|woff|eot|ttf)(\?.*|)$")) {
        hash_data(req.http.X-UA-Detect);
    }
}

sub vcl_backend_response {
    # Keep serving stale objects if backend swamped
    set beresp.grace = 60m;

    # Cache error pages for a short time
    if (beresp.status == 404 || beresp.status >= 500) {
        set beresp.http.X-Cache-Rule = "Cache for 2s - Content error: " + beresp.status;
        set beresp.ttl = 2s;
        return (deliver);
    }

{% for object in item.varnish_url_not_cache %}
{% if object.url is defined %}
    if (bereq.http.host ~ "^{{ object.url }}" && bereq.url ~ "^{{ object.path }}") {
{% if object.http_header is defined %}
        set beresp.http.X-Cache-Rule = "{{ object.http_header }}";
{% endif %}
        set beresp.uncacheable = true;
        set beresp.ttl = 10s;
        return (deliver);
    }  
{% else %}
    if (bereq.url ~ "^{{ object.path }}") {
{% if object.http_header is defined %}
        set beresp.http.X-Cache-Rule = "{{ object.http_header }}";
{% endif %}
        set beresp.uncacheable = true;
        set beresp.ttl = 10s;
        return (deliver);
    }
{% endif %}
{% endfor %}

{% if item.varnish_url_cache is defined %}
{% for object in item.varnish_url_cache %}
{% if object.url is defined %}
    if (bereq.http.host ~ "^{{ object.url }}" && bereq.url ~ "^{{ object.path }}") {
        unset beresp.http.Expires;
{% if object.http_header is defined %}
        set beresp.http.X-Cache-Rule = "{{ object.http_header }}";
{% endif %}
        set beresp.ttl = {{ object.cache_ttl }}s;
        set beresp.http.X-Backend = beresp.backend.name;
{% if object.cache_control is defined %}
        set beresp.http.Cache-Control = "public, max-age={{ object.cache_control }}";
{% else %}
        set beresp.http.Cache-Control = "no-cache";
{% endif %}
        set beresp.http.age = "0";
        unset beresp.http.set-cookie;
        return (deliver);
    }  
{% else %}
    if (bereq.url ~ "^{{ object.path }}") {
        unset beresp.http.Expires;
{% if object.http_header is defined %}
        set beresp.http.X-Cache-Rule = "{{ object.http_header }}";
{% endif %}
        set beresp.ttl = {{ object.cache_ttl }}s;
        set beresp.http.X-Backend = beresp.backend.name;
{% if object.cache_controlÂ is defined %}
	    set beresp.http.Cache-Control = "public, max-age={{ object.cache_control }}";
{% else %}
        set beresp.http.Cache-Control = "no-cache";
{% endif %}
	    set beresp.http.age = "0";
	    unset beresp.http.set-cookie;
	    return (deliver);     
    }
{% endif %}
{% endfor %}
{% endif %}
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
    
    unset resp.http.Via;
    unset resp.http.X-Varnish;
    unset resp.http.Server;
}

sub vcl_hit {
    if (obj.ttl >= 0s) {
        # A pure unadultered hit, deliver it
        return (deliver);
    }
   # We have no fresh fish. Lets look at the stale ones.
    if (std.healthy(req.backend_hint)) {
        if (obj.ttl + 10s > 0s) {
            set req.http.grace = "normal(limited)";
            return (deliver);
        } else {
            # No candidate for grace. Fetch a fresh object.
            return(miss);
        }
    } else {
        # backend is sick - use full grace
        if (obj.ttl + obj.grace > 0s) {
            set req.http.grace = "full";
            return (deliver);
        } else {
            # no graced object.
            return (miss);
        }
    }
    # no graced object.
    return (miss);
}

sub vcl_miss {
    if (req.method == "PURGE") {
        return (synth(404, "Object not cached."));
    }
    return (fetch);
}
